/*
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests.
 *
 * API version: 1.0.0
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// MessageType It can either be `email` or `phone`
type MessageType string

// List of messageType
const (
	MESSAGETYPE_EMAIL MessageType = "email"
	MESSAGETYPE_PHONE MessageType = "phone"
)

func (v *MessageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageType(value)
	for _, existing := range []MessageType{"email", "phone"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageType", value)
}

// Ptr returns reference to messageType value
func (v MessageType) Ptr() *MessageType {
	return &v
}

type NullableMessageType struct {
	value *MessageType
	isSet bool
}

func (v NullableMessageType) Get() *MessageType {
	return v.value
}

func (v *NullableMessageType) Set(val *MessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageType(val *MessageType) *NullableMessageType {
	return &NullableMessageType{value: val, isSet: true}
}

func (v NullableMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
